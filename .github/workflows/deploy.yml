name: CI
on:
  push:
    branches:
      - main
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: yarn install
      - name: Audit dependencies
        run: yarn audit

  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Build, tag, and push image to docker hub
        id: build_image_step
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKERHUB_PASSWORD: ${{secrets.DOCKERHUB_PASSWORD}}
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
        run: |
          docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
          docker build  --tag bigelio/web-app:latest -f ./web-app/Dockerfile .
          docker push bigelio/web-app:latest
          docker build  --tag bigelio/api-app:latest -f ./api-app/Dockerfile .
          docker push bigelio/api-app:latest

      - name: deploy to server
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOSTNAME: ${{ secrets.HOSTNAME  }}
          USER_NAME: ${{ secrets.USER_NAME  }}
          VERSION: ${{ secrets.VERSION  }}
          APP_PORT: ${{ secrets.APP_PORT  }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKERHUB_PASSWORD: ${{secrets.DOCKERHUB_PASSWORD}}
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
        run: |

          # get the private key from the github env and set  necessary permissions
          HOST=$HOSTNAME && echo $HOST
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          cat >>~/.ssh/config <<END
          Host demo
            HostName $HOSTNAME
            User ubuntu
            IdentityFile ~/.ssh/deploy.key
            StrictHostKeyChecking no
          END
          # SSH login
          ssh demo
           # set directory
          DIR="0_down_time_deployment_demo"

           if [ -d "$DIR" ]; then

           # Take action if $DIR exists

           # checkout the project folder
             cd $DIR && git checkout main && \
             git fetch --all && \
             git reset --hard origin/main && \
             git pull origin main && cd -

             cd $DIR && chmod +x deploy.sh && ./deploy.sh && cd -

           else

             echo "Error: ${DIR} not found. Can not continue to cloning the project from github."
             echo "Started cloning the repo"

           # download the sources codes from github
             git clone https://github.com/bigelio/0_down_time_deployment_demo.git && cd $DIR && chmod +x deploy.sh && ./deploy.sh && cd -


           fi
